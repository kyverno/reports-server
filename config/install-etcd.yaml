---
apiVersion: v1
kind: Namespace
metadata:
  name: reports-server
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: reports-server
  maxUnavailable: 50%
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: reports-server
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: 'true'
    rbac.authorization.k8s.io/aggregate-to-edit: 'true'
    rbac.authorization.k8s.io/aggregate-to-view: 'true'
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - ''
  resources:
    - namespaces
  verbs:
    - get
    - list
- apiGroups:
    - reports.kyverno.io
  resources:
    - ephemeralreports
    - clusterephemeralreports
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
    - deletecollection
- apiGroups:
    - ""
  resources:
    - namespaces
  verbs:
    - get
- apiGroups:
    - apiregistration.k8s.io
  resources:
    - apiservices
  verbs:
    - create
- apiGroups:
    - apiregistration.k8s.io
  resources:
    - apiservices
  verbs:
    - get
    - delete
    - update
    - patch
  resourceNames:
    - v1.reports.kyverno.io
    - v1alpha2.wgpolicyk8s.io
- apiGroups:
    - wgpolicyk8s.io
  resources:
    - policyreports
    - policyreports/status
    - clusterpolicyreports
    - clusterpolicyreports/status
  verbs:
    - create
    - delete
    - get
    - list
    - patch
    - update
    - watch
    - deletecollection
- apiGroups:
    - ''
    - events.k8s.io
  resources:
    - events
  verbs:
    - create
    - patch
- apiGroups:
    - authorization.k8s.io
  resources:
    - subjectaccessreviews
  verbs:
    - create
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: reports-server
subjects:
- kind: ServiceAccount
  name: reports-server
  namespace: reports-server
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
    - ''
  resources:
    - pods
  verbs:
    - get
    - list
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: reports-server
  namespace: kube-system
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: reports-server
  namespace: reports-server
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: reports-server
subjects:
- kind: ServiceAccount
  name: reports-server
  namespace: reports-server
---
apiVersion: v1
kind: Service
metadata:
  name: etcd
  namespace: reports-server
  labels:
    app: etcd-reports-server
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  clusterIP: None
  selector:
    app: etcd-reports-server
  publishNotReadyAddresses: true
  ports:
  - name: etcd-client
    port: 2379
  - name: etcd-server
    port: 2380
  - name: etcd-metrics
    port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: reports-server
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: reports-server
      app.kubernetes.io/instance: reports-server
  template:
    metadata:
      labels:
        helm.sh/chart: reports-server-0.1.24-rc1
        app.kubernetes.io/name: reports-server
        app.kubernetes.io/instance: reports-server
        app.kubernetes.io/version: "v0.1.20-rc2"
        app.kubernetes.io/managed-by: Helm
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: reports-server
      securityContext:
        fsGroup: 2000
      containers:
        - name: reports-server
          args:
            - --etcd
            - --etcdSkipTLS
            - --etcdEndpoints=https://etcd-0.etcd.reports-server:2379,https://etcd-1.etcd.reports-server:2379,https://etcd-2.etcd.reports-server:2379
            - --cert-dir=/tmp
            - --secure-port=4443
            - --authorization-always-allow-paths=/metrics
          env:
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
                  divisor: '1'
            - name: DB_HOST
              value: "reports-server-cluster-rw.reports-server"
            - name: DB_READ_REPLICA_HOSTS
              value: ""
            - name: DB_PORT
              value: 
            - name: DB_DATABASE
              value: "reportsdb"
            - name: DB_USER
              value: "app"
            - name: DB_PASSWORD
              value: "password"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: tmp-dir
          image: "reg.nirmata.io/nirmata/reports-server:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: https
              containerPort: 4443
              protocol: TCP
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            limits: null
            requests: null
      volumes:
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: reports-server
  name: etcd
  labels:
    app: etcd-reports-server
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
spec:
  serviceName: etcd
  replicas: 3
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: etcd-reports-server
  template:
    metadata:
      labels:
        app: etcd-reports-server
      annotations:
        serviceName: etcd
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - etcd-reports-server
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: etcd
        image:  "ghcr.io/nirmata/etcd:v3.5.18-cve-free"
        imagePullPolicy: IfNotPresent
        ports:
        - name: etcd-client
          containerPort: 2379
        - name: etcd-server
          containerPort: 2380
        - name: etcd-metrics
          containerPort: 8080
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 30
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        env:
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
             fieldPath: metadata.namespace
        - name: HOSTNAME
          valueFrom:
            fieldRef:
             fieldPath: metadata.name
        - name: SERVICE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['serviceName']
        - name: ETCDCTL_ENDPOINTS
          value: $(HOSTNAME).$(SERVICE_NAME):2379
        ## TLS client configuration for etcdctl in the container.
        ## These files paths are part of the "etcd-client-certs" volume mount.
        # - name: ETCDCTL_KEY
        #   value: /etc/etcd/certs/client/tls.key
        # - name: ETCDCTL_CERT
        #   value: /etc/etcd/certs/client/tls.crt
        # - name: ETCDCTL_CACERT
        #   value: /etc/etcd/certs/client/ca.crt
        ##
        ## Use this URI_SCHEME value for non-TLS clusters.
        - name: URI_SCHEME
          value: "http"
        ## TLS: Use this URI_SCHEME for TLS clusters.
        # - name: URI_SCHEME
        # value: "https"
        command:
        - /usr/local/bin/etcd
        args:
        - --name=$(HOSTNAME)
        - --data-dir=/data
        - --wal-dir=/data/wal
        - --listen-peer-urls=$(URI_SCHEME)://0.0.0.0:2380
        - --listen-client-urls=$(URI_SCHEME)://0.0.0.0:2379
        - --advertise-client-urls=$(URI_SCHEME)://$(HOSTNAME).$(SERVICE_NAME):2379
        - --initial-cluster-state=new
        - --initial-cluster-token=etcd-$(K8S_NAMESPACE)
        - --initial-cluster=etcd-0=$(URI_SCHEME)://etcd-0.$(SERVICE_NAME):2380,etcd-1=$(URI_SCHEME)://etcd-1.$(SERVICE_NAME):2380,etcd-2=$(URI_SCHEME)://etcd-2.$(SERVICE_NAME):2380
        - --initial-advertise-peer-urls=$(URI_SCHEME)://$(HOSTNAME).$(SERVICE_NAME):2380
        - --listen-metrics-urls=http://0.0.0.0:8080
        - --quota-backend-bytes=1932735283
        # - --auto-compaction-mode=periodic
        # - --auto-compaction-retention=10m
        # - --client-cert-auth
        # - --trusted-ca-file=$(ETCDCTL_CACERT)
        # - --cert-file=$(ETCDCTL_CERT)
        # - --key-file=$(ETCDCTL_KEY)
        # - --peer-client-cert-auth
        # - --peer-trusted-ca-file=/etc/etcd/certs/server/ca.crt
        # - --peer-cert-file=/etc/etcd/certs/server/tls.crt
        # - --peer-key-file=/etc/etcd/certs/server/tls.key
        volumeMounts:
        - name: etcd-data
          mountPath: /data
        # - name: etcd-client-tls
        #   mountPath: "/etc/etcd/certs/client"
        #   readOnly: true
        # - name: etcd-server-tls
        #   mountPath: "/etc/etcd/certs/server"
        #   readOnly: true
      volumes:
      # - name: etcd-client-tls
      #   secret:
      #     secretName: etcd-client-tls
      #     optional: false
      # - name: etcd-server-tls
      #   secret:
      #     secretName: etcd-server-tls
      #     optional: false
  volumeClaimTemplates:
  - metadata:
      name: etcd-data
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 2Gi
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha2.wgpolicyk8s.io
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
    kube-aggregator.kubernetes.io/automanaged: "false"
  annotations:
    helm.sh/hook: post-install
spec:
  group: wgpolicyk8s.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: reports-server
    namespace: reports-server
  version: v1alpha2
  versionPriority: 100
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1.reports.kyverno.io
  namespace: reports-server
  labels:
    helm.sh/chart: reports-server-0.1.24-rc1
    app.kubernetes.io/name: reports-server
    app.kubernetes.io/instance: reports-server
    app.kubernetes.io/version: "v0.1.20-rc2"
    app.kubernetes.io/managed-by: Helm
    kube-aggregator.kubernetes.io/automanaged: "false"
  annotations:
    helm.sh/hook: post-install
spec:
  group: reports.kyverno.io
  groupPriorityMinimum: 100
  insecureSkipTLSVerify: true
  service:
    name: reports-server
    namespace: reports-server
  version: v1
  versionPriority: 100
